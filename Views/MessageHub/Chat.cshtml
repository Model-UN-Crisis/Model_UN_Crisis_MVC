
@{
	Layout = "~/Views/Shared/_LayoutSideNav.cshtml";
}
<div class="header">
	<h1>Chat Title</h1>
	<a asp-controller="MessageHub" asp-action="Index">
		<button>Back</button>
	</a>
</div>

<div class="content" id="">
    <ui-scroll-container style="--thead-size: 44px;">
		<table>
            <thead>
                <tr>
                    <th>Participant's</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>content 1</td>
                    <td><a href=""> <button>Add</button></a></td>
                </tr>
                </tr>
            </tbody>
        </table>
    </ui-scroll-container>
</div>


<style>
	.header h1 {
		padding-left: 40px;
		font-size: 3rem;
		font-weight: 300;
	}

	.header button {
		margin-left: 40px;
		background-color: #076CED;
		color: #fdfdfd;
		border: none;
		text-align: center;
		text-decoration: none;
		display: inline-block;
		font-size: 16px;
		padding: 15px 32px;
		border-radius: 5px;
		opacity: 0.8;
		transition: 0.3s;
		cursor: pointer;
	}

		.header button:hover {
			opacity: 1
		}
	.content {
		width: 600px;
		height: 1000px;
		padding: 12px 20px;
		margin: 50px auto;
		outline: 1px solid rgb(190, 190, 190);
		font-size: 11pt;
		float:right;
	}

		
	table {
		width: 100%;
		border-collapse: separate;
		font-size: 12pt;
		border-spacing: 0;
	}

	th {
		position: sticky;
		top: 0;
		background-color: lightgray;
		padding: 8px 0;
		background-color: lightgray;
	}

	td {
		text-align: center;
		color: #666;
		padding: 7px 0;
	}

		td button {
			background-color: #04AA6D;
			border: none;
			color: white;
			padding: 10px 27px;
			text-align: center;
			text-decoration: none;
			display: inline-block;
			font-size: 16px;
		}

		th:nth-of-type(1),
		td:nth-of-type(1) {
			border-left: 0;
		}

	#container2 {
		float: right;
	}
</style>

<script>
	class UIScrollContainer extends HTMLElement {
		constructor() {
			super();

			const shadow = this.attachShadow({ mode: 'open' });

			const style = document.createElement('style');
			style.textContent = `
				:host {
					--thead-size: 0;
					--scrollbar-size: 6px;
					--scrollbar-color: hsl(200, 25%, 75%, 1.0);

					display: block;
					width: 100%;
					height: 100%;
				}

				#container {
					position: relative;
					width: 100%;
					height: 100%;
				}

				#scroll {
					width: calc(100% + var(--scrollbar-size));
					height: 100%;
					overflow-x: hidden;
					overflow-y: scroll;
					scroll-behavior: auto;
				}
				#scroll::-webkit-scrollbar {
					width: var(--scrollbar-size);
					box-sizing: content-box;
				}
				#scroll::-webkit-scrollbar-track {
					background-color: transparent;
				}
				#scroll::-webkit-scrollbar-thumb {
					background-color: var(--scrollbar-color);
					border-radius: 10px;
				}
				#scroll::-webkit-scrollbar-button:start {
					height: var(--thead-size);
				}

				#shadow_wrap {
					position: absolute;
					top: 0;
					left: 0;
					width: 100%;
					height: 100%;
					pointer-events: none;
				}

				#shadow_top,
				#shadow_btm {
					position: absolute;
					left: 0;
					width: 100%;
					height: var(--shadow-size);
				}

				#shadow_top {
					top: var(--thead-size);
					background: linear-gradient(to bottom, var(--shadow-color), hsl(0, 0%, 0%, 0));
				}

				#shadow_btm {
					bottom: 0;
					background: linear-gradient(to top, var(--shadow-color), hsl(0, 0%, 0%, 0));
				}

				.transition {
					transition: opacity 0.3s;
				}

				.hide {
					opacity: 0;
				}
			`;

			const slot = document.createElement('slot');

			this.scroll = document.createElement('div');
			this.scroll.id = 'scroll';
			this.scroll.append(slot);
			this.scroll.addEventListener('scroll', this.onScrolling.bind(this));

			this.shadowTop = document.createElement('div');
			this.shadowTop.id = 'shadow_top';

			this.shadowBtm = document.createElement('div');
			this.shadowBtm.id = 'shadow_btm';

			const shadowWrap = document.createElement('div');
			shadowWrap.id = 'shadow_wrap';
			shadowWrap.append(this.shadowTop, this.shadowBtm);

			const container = document.createElement('div');
			container.id = 'container';
			container.append(this.scroll, shadowWrap);

			shadow.append(style, container);
		}

		connectedCallback() {
			setTimeout(() => {
				this.onScrolling();

				this.shadowTop.classList.add('transition');
				this.shadowBtm.classList.add('transition');
			})
		}

		onScrolling(e) {
			this.shadowTop.classList.toggle('hide', this.scroll.scrollTop == 0);
			this.shadowBtm.classList.toggle('hide', this.scroll.scrollTop == this.scroll.scrollHeight - this.scroll.offsetHeight);
		}

		static get observedAttributes() {
			return [];
		}

		attributeChangedCallback(attr, oldValue, newValue) {

		}

		static get is() {
			return 'ui-scroll-container';
		}
	}

	customElements.define(UIScrollContainer.is, UIScrollContainer);
</script>